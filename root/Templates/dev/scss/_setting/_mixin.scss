@charset "utf-8";
//====================================================================================================
//////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    version: 1.0
//    created: 2017/04/20
//    update : -
//
//////////////////////////////////////////////////////////////////////////////////////////////////////
//====================================================================================================
@mixin vtBox {
    display: inline-block;
    vertical-align: top;
}

@mixin vmBox {
    display: inline-block;
    vertical-align: middle;
}

@mixin vbBox {
    display: inline-block;
    vertical-align: bottom;
}

@mixin hovertext($hoverStyle: null) {
    @if $hoverStyle==underline {
        text-decoration: none;
        &:hover {
            text-decoration: $hoverStyle;
        }
    }
    @else if $hoverStyle==none {
        text-decoration: underline;
        &:hover {
            text-decoration: $hoverStyle;
        }
    }
}

@mixin triangleTop($color: #000000, $triangleHeight: 0, $triangleWidth: 0) {
    content: "";
    display: block;
    border: solid $color;
    border-color: transparent transparent $color;
    border-width: 0 ($triangleWidth / 2) $triangleHeight;
    width: 0;
    line-height: 1;
}

@mixin triangleBottom($color: #000000, $triangleHeight: 0, $triangleWidth: 0) {
    content: "";
    display: block;
    border: solid $color;
    border-color: $color transparent transparent;
    border-width: $triangleHeight ($triangleWidth / 2) 0;
    width: 0;
    line-height: 1;
}

@mixin triangleRight($color: #000000, $triangleHeight: 0, $triangleWidth: 0) {
    content: "";
    display: block;
    border: solid $color;
    border-color: transparent transparent transparent $color;
    border-width: ($triangleHeight / 2) 0 ($triangleHeight / 2) $triangleWidth;
    width: 0;
    line-height: 1;
}

@mixin triangleLeft($color: #000000, $triangleHeight: 0, $triangleWidth: 0) {
    content: "";
    display: block;
    border: solid $color;
    border-color: transparent $color transparent transparent;
    border-width: ($triangleHeight / 2) $triangleWidth ($triangleHeight / 2) 0;
    width: 0;
    line-height: 1;
}

@mixin spriteBox($display: inline-block, $valign: middle) {
    overflow: hidden;
    display: $display;
    text-indent: 200%;
    white-space: nowrap;
    vertical-align: $valign;
    line-height: 1;
}

// @include createContent(0, 0, 0, 0);
@mixin createContent($top: null, $right: null, $bottom: null, $left: null) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    content: "";
    display: block;
}

// @include spriteImage();
@mixin spriteImage($sprite: $spritesheet, $path: '/') {
    $sprite-image: nth($sprite, 3);
    background-image: url($path + '#{$sprite-image}');
    @include spriteBox();
}

@mixin normalPDR_width($sprite) {
    width: nth($sprite, 5);
}

@mixin normalPDR_height($sprite) {
    height: nth($sprite, 6);
}

@mixin normalPDR_position($sprite) {
    $sprite-offset-x: nth($sprite, 3);
    $sprite-offset-y: nth($sprite, 4);
    @include normalPDR_width($sprite);
    @include normalPDR_height($sprite);
    background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin normalPDR_image($sprite, $path: '/') {
    $sprite-image: nth($sprite, 9);
    background-image: url($path + '#{$sprite-image}');
}

@mixin normalPDR($sprite, $display: inline-block, $valign: null, $path: '/') {
    @include spriteBox($display, $valign);
    @include normalPDR_image($sprite, $path);
    @include normalPDR_position($sprite);
}

@mixin retinaPDR_width($sprite) {
    width: nth($sprite, 5) / 2;
}

@mixin retinaPDR_height($sprite) {
    height: nth($sprite, 6) / 2;
}

@mixin retinaPDR_position($sprite) {
    $sprite-offset-x: nth($sprite, 3) / 2;
    $sprite-offset-y: nth($sprite, 4) / 2;
    @include retinaPDR_width($sprite);
    @include retinaPDR_height($sprite);
    background-position: $sprite-offset-x $sprite-offset-y;
    @include retinaPDR_size($sprite);
}

@mixin retinaPDR_image($sprite, $path: '/') {
    $sprite-image: nth($sprite, 9);
    background-image: url($path + '#{$sprite-image}');
}

@mixin retinaPDR_size($sprite) {
    background-size: nth($sprite, 7)/2 nth($sprite, 8)/2;
}

@mixin retinaPDR($sprite, $display: inline-block, $valign: null, $path: '/') {
    @include spriteBox($display, $valign);
    @include retinaPDR_image($sprite, $path);
    @include retinaPDR_position($sprite);
}

@mixin lastElement {
    & > *:last-child {
        margin-bottom: 0 !important;
    }
}

@mixin dotted($color, $spacing: 5px, $dotsize: 1px, $posTop: false, $posRight: false, $posBottom: false, $posLeft: false) {
	$bgAttr: (
		top: linear-gradient(to left, $color, $color $dotsize, transparent $dotsize, transparent $spacing) repeat-x 0 0,
		right: linear-gradient(to bottom, $color, $color $dotsize, transparent $dotsize, transparent $spacing) repeat-y 100% 0,
		bottom: linear-gradient(to left, $color, $color $dotsize, transparent $dotsize, transparent $spacing) repeat-x 0 100%,
		left: linear-gradient(to bottom, $color, $color $dotsize, transparent $dotsize, transparent $spacing) repeat-y 0 0
	);
	&::before {
		@include createContent(0, 0, 0, 0);
		background: if($posTop, map-get($bgAttr, top), null), if($posRight, map-get($bgAttr, right), null), if($posBottom, map-get($bgAttr, bottom), null), if($posLeft, map-get($bgAttr, left), null);
		background-size: if($posTop, $spacing $dotsize, null), if($posRight, $dotsize $spacing, null), if($posBottom, $spacing $dotsize, null), if($posLeft, $dotsize $spacing, null);
		z-index: -1;
	}
}

@mixin fts($fts: $baseFontSize, $lin: null) {
	$rem: $fts / 10;
	@if type-of($fts) == 'string'{
		font-size: unquote($fts);
		line-height: unquote($lin);
	}@else if ($fts != null) {
		font-size: #{$rem}rem;
		@if type-of($lin) == 'string'{
			line-height: unquote($lin);
		}@else if ($lin != null) {
			line-height: $lin / $fts;
		}
	}
}

@mixin textBorder($color, $width){
	text-shadow: 0 $width 0 $color, $width 0 0 $color, 0 -#{$width} 0 $color, -#{$width} 0 0 $color, -#{$width} -#{$width} 0 $color, $width -#{$width} 0 $color, -#{$width} $width 0 $color, $width $width 0 $color;
}

@mixin variableImage($width, $baseWidth: 750){
	width: ($width / $baseWidth * 100) * 1vw;
	height: auto;
}

@import "_gnavBtn";
